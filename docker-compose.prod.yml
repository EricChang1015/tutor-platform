version: "3.9"

services:
  postgres:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER:-produser}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME:-tutorplatform_prod}
      TZ: UTC
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/create_db.sql:/docker-entrypoint-initdb.d/01_create_db.sql:ro
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-produser} -d ${DB_NAME:-tutorplatform_prod}"]
      interval: 10s
      timeout: 5s
      retries: 5
    # 生產環境不暴露數據庫端口到外部
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    restart: always
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}", "--appendonly", "yes"]
    volumes:
      - redis_data:/data
    networks:
      - internal
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  minio:
    image: minio/minio:latest
    restart: always
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - internal
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  init-minio:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - internal
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER:-minioadmin} ${MINIO_ROOT_PASSWORD}
        mc mb myminio/proofs --ignore-existing
        mc policy set public myminio/proofs
        echo "MinIO bucket initialized successfully"

  mailhog:
    image: mailhog/mailhog:latest
    restart: always
    networks:
      - internal
    # 生產環境可能不需要 MailHog，使用真實 SMTP 服務
    profiles:
      - dev
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
      target: production
    restart: always
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://${DB_USER:-produser}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-tutorplatform_prod}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      
      # MinIO/S3 配置
      S3_ENDPOINT: minio:9000
      S3_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      S3_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      S3_BUCKET: proofs
      S3_REGION: us-east-1
      S3_USE_PATH_STYLE: "true"
      S3_USE_SSL: "false"
      
      # SMTP 配置（生產環境使用真實 SMTP）
      SMTP_HOST: ${SMTP_HOST:-mailhog}
      SMTP_PORT: ${SMTP_PORT:-1025}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      SMTP_SECURE: ${SMTP_SECURE:-false}
      FROM_EMAIL: ${FROM_EMAIL:-noreply@tutorplatform.com}
      FROM_NAME: ${FROM_NAME:-Tutor Platform}
      
      # 管理員種子帳號
      ADMIN_SEED_EMAIL: ${ADMIN_SEED_EMAIL:-admin@tutorplatform.com}
      ADMIN_SEED_PASSWORD: ${ADMIN_SEED_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      init-minio:
        condition: service_completed_successfully
    networks:
      - internal
      - web
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    # 資源限制
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  web:
    build:
      context: ./web
      dockerfile: Dockerfile
      target: production
    restart: always
    environment:
      NODE_ENV: production
      VITE_API_URL: ${API_URL:-http://localhost:3001}
    networks:
      - web
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    # 資源限制
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      api:
        condition: service_healthy
      web:
        condition: service_healthy
    networks:
      - web
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # 監控服務（可選）
  prometheus:
    image: prom/prometheus:latest
    restart: always
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - internal
      - monitoring
    profiles:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  grafana:
    image: grafana/grafana:latest
    restart: always
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - monitoring
    profiles:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  internal:
    driver: bridge
    internal: true
  web:
    driver: bridge
  monitoring:
    driver: bridge
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
    profiles:
      - monitoring
  grafana_data:
    driver: local
    profiles:
      - monitoring
