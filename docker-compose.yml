version: "3.9"

services:
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app_pass
      POSTGRES_DB: appdb
      TZ: UTC
    ports:
      - "5432:5432"
    volumes:
      - ./db/create_db.sql:/docker-entrypoint-initdb.d/01_create_db.sql:ro
      - ./data/pg:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d appdb"]
      interval: 3s
      timeout: 3s
      retries: 20

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    expose:
      - "6379"
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - ./data/redis:/data

  minio:
    image: minio/minio:latest
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio_pass_123
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./data/minio:/data

  init-minio:
    image: minio/mc:latest
    depends_on:
      - minio
    entrypoint: ["/bin/sh", "-c"]
    command:
      - >
        set -e;
        until (mc alias set localminio http://minio:9000 minio minio_pass_123) >/dev/null 2>&1; do
          echo "Waiting for MinIO...";
          sleep 2;
        done;
        mc mb localminio/proofs || true;
        echo "Bucket 'proofs' is ready.";

  mailhog:
    image: mailhog/mailhog:latest
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP port
      - "8025:8025"  # Web UI port

  api:
    build: ./api
    working_dir: /app
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DATABASE_URL: postgres://app:app_pass@postgres:5432/appdb
      REDIS_URL: redis://redis:6379
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minio
      S3_SECRET_KEY: minio_pass_123
      S3_BUCKET: proofs
      S3_REGION: us-east-1
      S3_USE_PATH_STYLE: "true"
      JWT_SECRET: "change_me"
      PORT: "3001"
      SMTP_HOST: mailhog
      SMTP_PORT: "1025"
      SMTP_USER: ""
      SMTP_PASS: ""
      SMTP_SECURE: "false"
      FROM_EMAIL: "noreply@tutorplatform.com"
      FROM_NAME: "Tutor Platform"
      ADMIN_SEED_EMAIL: "admin@example.com"
      ADMIN_SEED_PASSWORD: "admin123"
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_started
      init-minio:
        condition: service_started
    expose:
      - "3001"
    volumes:
      # 只掛載需要熱重載的檔案，避免覆蓋 node_modules
      - ./api/src:/app/src
      - ./api/prisma:/app/prisma

  web:
    image: node:20-alpine
    working_dir: /app
    restart: unless-stopped
    environment:
      NODE_ENV: production
      VITE_API_URL: /api
      PORT: "3000"
      NPM_CONFIG_PRODUCTION: "false"
    depends_on:
      - api
    expose:
      - "3000"
    volumes:
      - ./web:/app
    command: >
      sh -c "
        if [ -f package-lock.json ]; then npm ci; else npm i; fi &&
        npm run build &&
        npm run preview
      "

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./data/nginx/logs:/var/log/nginx
    depends_on:
      - web
      - api
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3